# -*- coding: utf-8 -*-
"""Car Price Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17lVrbv2waq0_NslAwVDdnOEkY9Bnkk51

Import dependecies
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn import metrics
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Lasso

""" Data collection and manipulation"""

car_dataset = pd.read_csv('/content/car data.csv')

car_dataset.head(
)

car_dataset.shape

car_dataset.describe()

car_dataset.groupby('Fuel_Type').count()

car_dataset['Seller_Type'].value_counts()

car_dataset['Transmission'].value_counts()

car_dataset['Owner'].value_counts()

# Check if there are missing values
np.sum(car_dataset.isnull())

# Convert text values into numeric
car_dataset.replace({'Fuel_Type': {'CNG':0, 'Diesel':1, 'Petrol': 2}, 'Seller_Type': {'Dealer': 0, 'Individual': 1}, 'Transmission': {'Manual': 0, 'Automatic': 2}}, inplace=True)
car_dataset.head()

"""Split data and label"""

X_data = car_dataset.drop(columns=['Car_Name', 'Selling_Price'], axis=1)
Y_data = car_dataset['Selling_Price']

"""Split train and test data"""

X_train, X_test, Y_train, Y_test = train_test_split(X_data, Y_data, test_size=0.1, random_state=2)

"""Train the model with test data"""

regressor = LinearRegression()
regressor.fit(X_train, Y_train)

# Evaluate the Accurancy for train data
X_train_prediction = regressor.predict(X_train)
X_train_score = metrics.r2_score(Y_train, X_train_prediction)
print(X_train_score)

# Evaluate the test accurancy
X_test_prediction =regressor.predict(X_test)
X_test_score = metrics.r2_score(Y_test, X_test_prediction)
print(X_test_score)

# Visualize actual prices and predicted prices
plt.scatter(Y_train, X_train_prediction)
plt.xlabel('Actual Prices')
plt.ylabel('Predicted Prices')
plt.title('Actual Prices vs Predicted Prices')
plt.show()

"""Lasso Regression"""

lasso_regression = Lasso()
lasso_regression.fit(X_train, Y_train)

# Accurancy of training data
X_train_prediction_lasso = lasso_regression.predict(X_train)
X_train_lasso_score =metrics.r2_score(Y_train, X_train_prediction_lasso )
print(X_train_lasso_score)

# Plot actual data and prediction data
plt.scatter(Y_train, X_train_prediction_lasso)
plt.xlabel('Actual Prices')
plt.ylabel('Predicted Prices')
plt.title('Actual Prices vs Predicted Prices')
plt.show()

